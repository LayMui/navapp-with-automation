/// <reference types="node" />
import { Expectation, Optional, QuestionAdapter } from '@serenity-js/core';
import { URL } from 'url';
import { Switchable } from './Switchable';
export declare abstract class Page implements Optional, Switchable {
    protected readonly handle: string;
    static current(): QuestionAdapter<Page>;
    static whichName(expectation: Expectation<string>): QuestionAdapter<Page>;
    static whichTitle(expectation: Expectation<string>): QuestionAdapter<Page>;
    static whichUrl(expectation: Expectation<string>): QuestionAdapter<Page>;
    private static findMatchingPage;
    constructor(handle: string);
    /**
     * @desc
     *  Retrieves the document title of the current top-level browsing context, equivalent to calling `document.title`.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/title
     *
     * @returns {Promise<string>}
     */
    abstract title(): Promise<string>;
    /**
     * @desc
     *  Retrieves the URL of the current top-level browsing context.
     *
     * @returns {Promise<URL>}
     */
    abstract url(): Promise<URL>;
    /**
     * @desc
     *  Retrieves the name of the current top-level browsing context.
     *
     * @returns {Promise<string>}
     */
    abstract name(): Promise<string>;
    /**
     * @desc
     *  Checks if a given window / tab / page is open and can be switched to.
     *
     * @returns {Promise<string>}
     */
    abstract isPresent(): Promise<boolean>;
    /**
     * @desc
     *  Returns the actual viewport size available for the given page,
     *  excluding any scrollbars.
     *
     * @returns {Promise<{ width: number, height: number }>}
     */
    abstract viewportSize(): Promise<{
        width: number;
        height: number;
    }>;
    /**
     *
     * @param size
     */
    abstract setViewportSize(size: {
        width: number;
        height: number;
    }): Promise<void>;
    /**
     * @desc
     *  Switches the current browsing context to the given pare
     *  and returns an object that allows the caller to switch back
     *  to the previous context if needed.
     *
     * @returns {Promise<{ switchBack(): Promise<void> }>}
     */
    abstract switchTo(): Promise<{
        switchBack(): Promise<void>;
    }>;
    /**
     * @desc
     *  Closes the given page.
     *
     * @returns {Promise<void>}
     */
    abstract close(): Promise<void>;
    /**
     * @desc
     *  Closes any open pages, except for this one.
     *
     * @returns {Promise<void>}
     */
    abstract closeOthers(): Promise<void>;
    toString(): string;
}
