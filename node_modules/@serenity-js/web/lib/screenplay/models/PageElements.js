"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PageElements = void 0;
const core_1 = require("@serenity-js/core");
const abilities_1 = require("../abilities");
class PageElements extends core_1.List {
    /**
     * @param locator
     */
    constructor(locator) {
        super(allElementsOf(locator));
        this.locator = locator;
    }
    static located(selector) {
        return new PageElements(relativeToDocumentRoot(selector));
    }
    of(parent) {
        return new PageElements(relativeToParent(this.locator, parent))
            .describedAs(`<<${this.toString()}>>` + (0, core_1.f) `.of(${parent})`);
    }
}
exports.PageElements = PageElements;
/**
 * @package
 */
function relativeToDocumentRoot(selector) {
    return core_1.Question.about(selector.toString(), async (actor) => {
        const bySelector = await actor.answer(selector);
        return abilities_1.BrowseTheWeb.as(actor).locate(bySelector);
    });
}
/**
 * @package
 */
function relativeToParent(relativeLocator, parent) {
    return core_1.Question.about(relativeLocator.toString() + (0, core_1.f) `.of${parent}`, async (actor) => {
        const locator = await actor.answer(relativeLocator);
        const parentElement = await actor.answer(parent);
        return locator.of(parentElement.locator);
    });
}
/**
 * @package
 */
function allElementsOf(locator) {
    return core_1.Question.about(`page elements located ${locator.toString()}`, async (actor) => {
        const resolved = await actor.answer(locator);
        return resolved.allElements();
    });
}
//# sourceMappingURL=PageElements.js.map