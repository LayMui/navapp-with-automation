"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebdriverIOFrameworkAdapter = void 0;
const core_1 = require("@serenity-js/core");
const is_plain_object_1 = require("is-plain-object");
const reporter_1 = require("./reporter");
const OutputStreamBufferPrinter_1 = require("./reporter/OutputStreamBufferPrinter");
const TestRunnerLoader_1 = require("./TestRunnerLoader");
const WebdriverIONotifier_1 = require("./WebdriverIONotifier");
const deepmerge = require("deepmerge");
/**
 * @package
 */
class WebdriverIOFrameworkAdapter {
    constructor(serenity, loader, cwd, cid, webdriverIOConfig, specs, capabilities, reporter) {
        this.serenity = serenity;
        this.loader = loader;
        this.cwd = cwd;
        this.cid = cid;
        this.specs = specs;
        this.capabilities = capabilities;
        const config = deepmerge(this.defaultConfig(), webdriverIOConfig, {
            isMergeableObject: is_plain_object_1.isPlainObject,
        });
        this.adapter = new TestRunnerLoader_1.TestRunnerLoader(this.loader, this.cwd, this.cid)
            .runnerAdapterFor(config);
        // This is the only (hacky) way to register a fake reporter programmatically (as of @wdio/reporter 7.4.2)
        //  - https://github.com/webdriverio/webdriverio/blob/365fb0ad79fcf4471f21f23e18afa6818986dbdb/packages/wdio-runner/src/index.ts#L147-L181
        //  - https://github.com/webdriverio/webdriverio/blob/365fb0ad79fcf4471f21f23e18afa6818986dbdb/packages/wdio-runner/src/reporter.ts#L24
        reporter._reporters.push(reporter.initReporter([
            reporter_1.BrowserCapabilitiesReporter, { serenity: this.serenity },
        ]));
        this.notifier = new WebdriverIONotifier_1.WebdriverIONotifier(config, capabilities, reporter, this.adapter.successThreshold(), cid, this.specs);
        const outputStreamBuffer = new reporter_1.OutputStreamBuffer(`[${this.cid}]`);
        const outputStreamBufferPrinter = new OutputStreamBufferPrinter_1.OutputStreamBufferPrinter(outputStreamBuffer, reporter.getWriteStreamObject('@serenity-js/webdriverio'));
        this.serenity.configure({
            outputStream: outputStreamBuffer,
            cueTimeout: config.serenity.cueTimeout,
            actors: config.serenity.actors,
            crew: [
                ...config.serenity.crew,
                this.notifier,
                outputStreamBufferPrinter,
            ]
        });
    }
    async init() {
        await this.adapter.load(this.specs);
        return this;
    }
    hasTests() {
        return this.adapter.scenarioCount() > 0;
    }
    run() {
        return this.adapter.run().then(() => this.notifier.failureCount());
    }
    defaultConfig() {
        return {
            serenity: {
                crew: [
                    core_1.ArtifactArchiver.storingArtifactsAt(this.cwd.value, 'target/site/serenity'),
                ]
            }
        };
    }
}
exports.WebdriverIOFrameworkAdapter = WebdriverIOFrameworkAdapter;
//# sourceMappingURL=WebdriverIOFrameworkAdapter.js.map