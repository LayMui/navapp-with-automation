"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebdriverIOPage = void 0;
const web_1 = require("@serenity-js/web");
const url_1 = require("url");
class WebdriverIOPage extends web_1.Page {
    constructor(browser, handle) {
        super(handle);
        this.browser = browser;
    }
    title() {
        return this.switchToAndPerform(async (browser) => {
            return browser.getTitle();
        });
    }
    name() {
        return this.switchToAndPerform(async (browser) => {
            return browser.execute(`return window.name`);
        });
    }
    async url() {
        return this.switchToAndPerform(async (browser) => {
            return new url_1.URL(await browser.getUrl());
        });
    }
    async viewportSize() {
        return this.switchToAndPerform(async (browser) => {
            if (!browser.isDevTools) {
                const calculatedViewportSize = await browser.execute(`
                    return {
                        width:  Math.max(document.documentElement.clientWidth,  window.innerWidth || 0),
                        height: Math.max(document.documentElement.clientHeight, window.innerHeight || 0),
                    }
                `);
                // Chrome headless hard-codes window.innerWidth and window.innerHeight to 0
                if (calculatedViewportSize.width > 0 && calculatedViewportSize.height > 0) {
                    return calculatedViewportSize;
                }
            }
            return browser.getWindowSize();
        });
    }
    setViewportSize(size) {
        return this.switchToAndPerform(async (browser) => {
            let desiredWindowSize = size;
            if (!browser.isDevTools) {
                desiredWindowSize = await browser.execute(`
                var currentViewportWidth  = Math.max(document.documentElement.clientWidth, window.innerWidth || 0)
                var currentViewportHeight = Math.max(document.documentElement.clientHeight, window.innerHeight || 0)
                
                return {
                    width:  Math.max(window.outerWidth  - currentViewportWidth  + ${size.width},  ${size.width}),
                    height: Math.max(window.outerHeight - currentViewportHeight + ${size.height}, ${size.height}),
                };
            `);
            }
            return browser.setWindowSize(desiredWindowSize.width, desiredWindowSize.height);
        });
    }
    async close() {
        return this.switchToAndPerform(browser => browser.closeWindow());
    }
    async closeOthers() {
        const windowHandles = await this.browser.getWindowHandles();
        for (const handle of windowHandles) {
            if (handle !== this.handle) {
                await this.browser.switchToWindow(handle);
                await this.browser.closeWindow();
            }
        }
        await this.browser.switchToWindow(this.handle);
    }
    async isPresent() {
        const currentPageHandle = await this.browser.getWindowHandle();
        const desiredPageHandle = this.handle;
        const isOpen = await this.browser.switchToWindow(desiredPageHandle).then(() => true, _error => false);
        await this.browser.switchToWindow(currentPageHandle);
        return isOpen;
    }
    async switchTo() {
        const originalWindowHandle = await this.browser.getWindowHandle();
        await this.browser.switchToWindow(this.handle);
        return {
            switchBack: async () => {
                await this.browser.switchToWindow(originalWindowHandle);
            }
        };
    }
    async switchToAndPerform(action) {
        const currentPageHandle = await this.browser.getWindowHandle();
        const desiredPageHandle = this.handle;
        const shouldSwitch = currentPageHandle !== desiredPageHandle;
        if (shouldSwitch) {
            await this.browser.switchToWindow(desiredPageHandle);
        }
        const result = await action(this.browser);
        if (shouldSwitch) {
            await this.browser.switchToWindow(currentPageHandle);
        }
        return result;
    }
}
exports.WebdriverIOPage = WebdriverIOPage;
//# sourceMappingURL=WebdriverIOPage.js.map