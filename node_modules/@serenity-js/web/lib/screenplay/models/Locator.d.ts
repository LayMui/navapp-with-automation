import { PageElement } from './PageElement';
import { Selector } from './selectors';
export declare abstract class Locator<Native_Element_Type, Native_Root_Element_Type = any, Selector_Type extends Selector = Selector> {
    protected readonly parentRoot: () => Promise<Native_Root_Element_Type> | Native_Root_Element_Type;
    protected readonly selector: Selector_Type;
    protected readonly locateElement: (root: Native_Root_Element_Type) => Promise<Native_Element_Type> | Native_Element_Type;
    protected readonly locateAllElements: (root: Native_Root_Element_Type) => Promise<Array<Native_Element_Type>> | Array<Native_Element_Type>;
    constructor(parentRoot: () => Promise<Native_Root_Element_Type> | Native_Root_Element_Type, selector: Selector_Type, locateElement: (root: Native_Root_Element_Type) => Promise<Native_Element_Type> | Native_Element_Type, locateAllElements: (root: Native_Root_Element_Type) => Promise<Array<Native_Element_Type>> | Array<Native_Element_Type>);
    nativeElement(): Promise<Native_Element_Type>;
    abstract of(parent: Locator<Native_Element_Type, Native_Root_Element_Type>): Locator<Native_Element_Type, Native_Root_Element_Type>;
    abstract element(): PageElement<Native_Element_Type>;
    abstract allElements(): Promise<Array<PageElement<Native_Element_Type>>>;
    toString(): string;
}
