"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PhotoTakingStrategy = void 0;
const events_1 = require("@serenity-js/core/lib/events");
const model_1 = require("@serenity-js/core/lib/model");
const screenplay_1 = require("../../../../screenplay");
/**
 * @desc
 *  Configures the {@link Photographer} to take photos (a.k.a. screenshots)
 *  of the {@link @serenity-js/core/lib/screenplay~Activity} performed
 *  by the {@link @serenity-js/core/lib/screenplay/actor~Actor} in the spotlight
 *  under specific conditions.
 *
 * @abstract
 */
class PhotoTakingStrategy {
    /**
     * @desc
     *  Takes a photo of the web browser held by the {@link @serenity-js/core/lib/screenplay/actor~Actor} in the spotlight.
     *
     * @param {@serenity-js/core/lib/events~ActivityStarts | @serenity-js/core/lib/events~ActivityFinished} event
     * @param {@serenity-js/core/lib/stage~Stage} stage - the Stage that holds reference to the Actor in the spotlight
     * @returns {void}
     *
     * @see {@link @serenity-js/core/lib/stage~Stage#theActorInTheSpotlight}
     */
    async considerTakingPhoto(event, stage) {
        if (!this.shouldTakeAPhotoOf(event)) {
            return void 0;
        }
        let browseTheWeb;
        try {
            browseTheWeb = screenplay_1.BrowseTheWeb.as(stage.theActorInTheSpotlight());
        }
        catch {
            // actor doesn't have a browser, abort
            return void 0;
        }
        const id = model_1.CorrelationId.create(), nameSuffix = this.photoNameFor(event);
        stage.announce(new events_1.AsyncOperationAttempted(new model_1.Description(`[Photographer:${this.constructor.name}] Taking screenshot of '${nameSuffix}'...`), id));
        let dialogIsPresent;
        try {
            dialogIsPresent = await browseTheWeb.modalDialog().then(dialog => dialog.isPresent());
            if (dialogIsPresent) {
                return stage.announce(new events_1.AsyncOperationCompleted(new model_1.Description(`[${this.constructor.name}] Aborted taking screenshot of '${nameSuffix}' because of a modal dialog obstructing the view`), id));
            }
        }
        catch (error) {
            return stage.announce(new events_1.AsyncOperationFailed(error, id));
        }
        try {
            const capabilities = await browseTheWeb.browserCapabilities();
            const screenshot = await browseTheWeb.takeScreenshot();
            const context = [capabilities.platformName, capabilities.browserName, capabilities.browserVersion], photoName = this.combinedNameFrom(...context, nameSuffix);
            stage.announce(new events_1.ActivityRelatedArtifactGenerated(event.sceneId, event.activityId, photoName, model_1.Photo.fromBase64(screenshot)));
            return stage.announce(new events_1.AsyncOperationCompleted(new model_1.Description(`[${this.constructor.name}] Took screenshot of '${nameSuffix}' on ${context}`), id));
        }
        catch (error) {
            if (this.shouldIgnore(error)) {
                stage.announce(new events_1.AsyncOperationCompleted(new model_1.Description(`[${this.constructor.name}] Aborted taking screenshot of '${nameSuffix}' because of ${error.constructor && error.constructor.name}`), id));
            }
            else {
                stage.announce(new events_1.AsyncOperationFailed(error, id));
            }
        }
    }
    combinedNameFrom(...parts) {
        return new model_1.Name(parts.filter(v => !!v).join('-'));
    }
    shouldIgnore(error) {
        return error.name && (error.name === 'NoSuchSessionError' ||
            (error.name === 'ProtocolError' && error.message.includes('Target closed')));
        // todo: add SauceLabs
        //  [0-0] 2021-12-02T01:32:36.402Z ERROR webdriver: Request failed with status 404 due to no such window: no such window: target window already closed
        //  [0-0] from unknown error: web view not found
    }
}
exports.PhotoTakingStrategy = PhotoTakingStrategy;
//# sourceMappingURL=PhotoTakingStrategy.js.map