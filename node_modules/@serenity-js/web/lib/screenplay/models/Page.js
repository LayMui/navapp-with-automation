"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Page = void 0;
const core_1 = require("@serenity-js/core");
const abilities_1 = require("../abilities");
class Page {
    constructor(handle) {
        this.handle = handle;
    }
    static current() {
        return core_1.Question.about('current page', actor => {
            return abilities_1.BrowseTheWeb.as(actor).currentPage();
        });
    }
    static whichName(expectation) {
        return core_1.Question.about(`page which name does ${expectation}`, async (actor) => {
            const pages = await abilities_1.BrowseTheWeb.as(actor).allPages();
            return Page.findMatchingPage(`name does ${expectation}`, pages, page => actor.answer(expectation.isMetFor(page.name())));
        });
    }
    static whichTitle(expectation) {
        return core_1.Question.about(`page which title does ${expectation}`, async (actor) => {
            const pages = await abilities_1.BrowseTheWeb.as(actor).allPages();
            return Page.findMatchingPage(`title does ${expectation}`, pages, page => actor.answer(expectation.isMetFor(page.title())));
        });
    }
    static whichUrl(expectation) {
        return core_1.Question.about(`page which URL does ${expectation}`, async (actor) => {
            const pages = await abilities_1.BrowseTheWeb.as(actor).allPages();
            return Page.findMatchingPage(`url does ${expectation}`, pages, page => actor.answer(expectation.isMetFor(page.url().then(url => url.toString()))));
        });
    }
    static async findMatchingPage(expectationDescription, pages, matcher) {
        for (const page of pages) {
            const outcome = await matcher(page);
            if (outcome instanceof core_1.ExpectationMet) {
                return page;
            }
        }
        throw new core_1.LogicError(`Couldn't find a page which ${expectationDescription}`);
    }
    toString() {
        return `page (handle=${this.handle})`;
    }
}
exports.Page = Page;
//# sourceMappingURL=Page.js.map