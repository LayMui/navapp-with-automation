import { Answerable, AnswersQuestions, CollectsArtifacts, Interaction, UsesAbilities } from '@serenity-js/core';
/**
 * @desc
 *  Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to
 *  execute a script within the context of the current browser window.
 *
 *  Please see the tests below for usage examples.
 *
 * @see {@link LastScriptExecution.result}
 */
export declare class ExecuteScript {
    /**
     * @desc
     *  Instantiates a version of this {@link @serenity-js/core/lib/screenplay~Interaction}
     *  configured to load a script from `sourceUrl`.
     *
     * @param {string} sourceUrl
     *  The URL to load the script from
     *
     * @returns {@serenity-js/core/lib/screenplay~Interaction}
     */
    static from(sourceUrl: string): Interaction;
    /**
     * @desc
     *  Schedules a command to execute asynchronous JavaScript in the context of the currently selected frame or window.
     *  The script fragment will be executed as the body of an anonymous function.
     *  If the script is provided as a function object, that function will be converted to a string for injection
     *  into the target window.
     *
     *  Any arguments provided in addition to the script will be included as script arguments and may be referenced
     *  using the `arguments` object. Arguments may be a `boolean`, `number`, `string`
     *  or {@link Target} (`Answerable<Element>`).
     *  Arrays and objects may also be used as script arguments as long as each item adheres
     *  to the types previously mentioned.
     *
     *  Unlike executing synchronous JavaScript with {@link ExecuteScript#sync},
     *  scripts executed with this function must explicitly signal they are finished by invoking the provided callback.
     *
     *  This callback will always be injected into the executed function as the last argument,
     *  and thus may be referenced with `arguments[arguments.length - 1]`.
     *
     *  If the script invokes the `callback` with a return value, this will be made available
     *  via the {@link LastScriptExecution.result}.
     *
     *  **Please note** that in order to signal an error in the `script` you need to throw an {@link Error}
     *  instead of passing it to the callback function.
     *
     * @example <caption>Executing an async script</caption>
     *  import { ExecuteScript } from '@serenity-js/webdriverio';
     *
     *  actor.attemptsTo(
     *      ExecuteScript.async(`
     *          var callback = arguments[arguments.length - 1];
     *
     *          // do stuff
     *
     *          callback(result)
     *      `)
     *  );
     *
     * @example <caption>Passing arguments to an async script</caption>
     *  import { ExecuteScript } from '@serenity-js/webdriverio';
     *
     *  actor.attemptsTo(
     *      ExecuteScript.async(`
     *          var name = arguments[0];
     *          var age = arguments[1];
     *          var callback = arguments[arguments.length - 1];
     *
     *          // do stuff
     *
     *          callback(result)
     *      `).withArguments('Bob', 24)
     *  );
     *
     * @example <caption>Passing Target arguments to an async script</caption>
     *  import { ExecuteScript } from '@serenity-js/webdriverio';
     *
     *  actor.attemptsTo(
     *      ExecuteScript.async(`
     *          var header = arguments[0];    // Target gets converted to a WebElement
     *          var callback = arguments[arguments.length - 1];
     *
     *          callback(header.innerText)
     *      `).withArguments(Target.the('header').located(by.css('h1')))
     *  );
     *
     * @example <caption>Executing async script as function</caption>
     *  import { ExecuteScript } from '@serenity-js/webdriverio';
     *
     *  actor.attemptsTo(
     *      ExecuteScript.async(function getText(header, callback) {
     *          callback(header.innerText)
     *      }).withArguments(Target.the('header').located(by.css('h1')))
     *  );
     *
     * @param {string | Function} script
     *  The script to be executed
     *
     * @returns {ExecuteScriptWithArguments}
     *
     * @see {@link LastScriptExecution.result}
     */
    static async(script: string | Function): ExecuteScriptWithArguments;
    /**
     * @desc
     *  Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to
     *  execute a synchronous script in the context of the currently selected frame or window.
     *
     *  If the script returns a value, it will be made available via {@link LastScriptExecution.result}.
     *
     * @example <caption>Executing a sync script as string and reading the result</caption>
     *  import { actorCalled } from '@serenity-js/core';
     *  import { BrowseTheWeb, ExecuteScript, LastScriptExecution } from '@serenity-js/webdriverio';
     *  import { Ensure, includes } from '@serenity-js/assertions';
     *
     *  actorCalled('Joseph')
     *      .whoCan(BrowseTheWeb.using(browser))
     *      .attemptsTo(
     *          ExecuteScript.sync('return navigator.userAgent'),
     *          Ensure.that(LastScriptExecution.result<string>(), includes('Chrome')),
     *      );
     *
     * @example <caption>Executing a sync script as function and reading the result</caption>
     *  import { actorCalled } from '@serenity-js/core';
     *  import { by, BrowseTheWeb, Enter, ExecuteScript, LastScriptExecution, Target } from '@serenity-js/webdriverio';
     *
     *  const someOfferField      = Target.the('offer code').located(by.id('offer-code'));
     *  const applyOfferCodeField = Target.the('apply offer field').located(by.id('apply-offer-code'));
     *
     *  actorCalled('Joseph')
     *      .whoCan(BrowseTheWeb.using(browser))
     *      .attemptsTo(
     *          // inject JavaScript to read some property of an element
     *          ExecuteScript.sync(function getValue(element) {
     *              return element.value;
     *          }).withArguments(someOfferField),
     *
     *          // use LastScriptExecution.result() to read the value
     *          // returned from the injected script
     *          // and pass it to another interaction
     *          Enter.theValue(LastScriptExecution.result<string>()).into(applyOfferCodeField),
     *      );
     *
     * @param {string | Function} script
     *  The script to be executed
     *
     * @returns {ExecuteScriptWithArguments}
     *
     * @see {@link LastScriptExecution.result}
     */
    static sync(script: string | Function): ExecuteScriptWithArguments;
}
/**
 * @desc
 *  Allows for a script to be executed to be parametrised.
 *
 *  **Please note** that the arguments can be both synchronous and asynchronous {@link @serenity-js/core/lib/screenplay~Question}s
 *  as well as regular static values.
 *
 * @abstract
 *
 * @see {@link ExecuteScript}
 *
 * @extends {@serenity-js/core/lib/screenplay~Interaction}
 */
export declare abstract class ExecuteScriptWithArguments extends Interaction {
    protected readonly script: string | Function;
    protected readonly args: Array<Answerable<any>>;
    /**
     * @param {string | Function} script
     *  The script to be executed
     *
     * @param {Array<Answerable<any>>} args
     *  Arguments to parametrise the script with
     */
    constructor(script: string | Function, // eslint-disable-line @typescript-eslint/ban-types
    args?: Array<Answerable<any>>);
    /**
     * @desc
     *  Instantiates an {@link @serenity-js/core/lib/screenplay~Interaction}
     *  to {@link Enter}.
     *
     * @param {...Array<Answerable<any>>} args
     *  Arguments to parametrise the script with
     *
     * @returns {@serenity-js/core/lib/screenplay~Interaction}
     */
    abstract withArguments(...args: Array<Answerable<any>>): Interaction;
    /**
     * @desc
     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}
     *  perform this {@link @serenity-js/core/lib/screenplay~Interaction}.
     *
     * @param {UsesAbilities & AnswersQuestions} actor
     *  An {@link @serenity-js/core/lib/screenplay/actor~Actor} to perform this {@link @serenity-js/core/lib/screenplay~Interaction}
     *
     * @returns {PromiseLike<void>}
     *
     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}
     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}
     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}
     */
    performAs(actor: UsesAbilities & CollectsArtifacts & AnswersQuestions): Promise<void>;
    protected abstract executeAs(actor: UsesAbilities & AnswersQuestions, args: any[]): Promise<any>;
}
