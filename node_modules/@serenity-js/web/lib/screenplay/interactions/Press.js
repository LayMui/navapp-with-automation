"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Press = void 0;
const core_1 = require("@serenity-js/core");
const io_1 = require("@serenity-js/core/lib/io");
const input_1 = require("../../input");
const abilities_1 = require("../abilities");
const PageElementInteraction_1 = require("./PageElementInteraction");
/**
 * @desc
 *  Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to
 *  send a key press or a sequence of keys to a Web element.
 *
 *  *Please note*: On macOS, some keyboard shortcuts might not work with the [`devtools` protocol](https://webdriver.io/docs/automationProtocols/#devtools-protocol).
 *
 *  For example:
 *  - to *copy*, instead of `Meta+C`, use `Control+Insert`
 *  - to *cut*, instead of `Meta+X`, use `Control+Delete`
 *  - to *paste*, instead of `Meta+V`, use `Shift+Insert`
 *
 * @example <caption>Example widget</caption>
 *  <form>
 *    <input type="text" name="example" id="example" />
 *  </form>
 *
 * @example <caption>Lean Page Object describing the widget</caption>
 *  import { by, Target } from '@serenity-js/webdriverio';
 *
 *  class Form {
 *      static exampleInput = Target.the('example input')
 *          .located(by.id('example'));
 *  }
 *
 * @example <caption>Pressing keys</caption>
 *  import { actorCalled } from '@serenity-js/core';
 *  import { BrowseTheWeb, Key, Press, Value } from '@serenity-js/webdriverio';
 *  import { Ensure, equals } from '@serenity-js/assertions';
 *
 *  actorCalled('Priyanka')
 *      .whoCan(BrowseTheWeb.using(browser))
 *      .attemptsTo(
 *          Press.the('H', 'i', '!', Key.ENTER).in(Form.exampleInput),
 *          Ensure.that(Value.of(Form.exampleInput), equals('Hi!')),
 *      );
 *
 * @see {@link Key}
 * @see {@link BrowseTheWeb}
 * @see {@link Target}
 * @see {@link @serenity-js/assertions~Ensure}
 * @see {@link @serenity-js/assertions/lib/expectations~equals}
 *
 * @extends {ElementInteraction}
 */
class Press extends PageElementInteraction_1.PageElementInteraction {
    /**
     * @param {Answerable<Array<Key | string>>} keys
     *  A sequence of one or more keys to press
     */
    constructor(keys) {
        super((0, io_1.formatted) `#actor presses ${keys}`);
        this.keys = keys;
    }
    /**
     * @desc
     *  Instantiates this {@link @serenity-js/core/lib/screenplay~Interaction}.
     *
     * @param {...keys: Array<Answerable<Key | string | Key[] | string[]>>} keys
     *  A sequence of one or more keys to press
     *
     * @returns {PressBuilder}
     */
    static the(...keys) {
        return new Press(KeySequence.of(keys));
    }
    in(field /* | Question<AlertPromise> | AlertPromise */) {
        return new PressKeyInField(this.keys, field);
    }
    /**
     * @desc
     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}
     *  perform this {@link @serenity-js/core/lib/screenplay~Interaction}.
     *
     * @param {UsesAbilities & AnswersQuestions} actor
     *  An {@link @serenity-js/core/lib/screenplay/actor~Actor} to perform this {@link @serenity-js/core/lib/screenplay~Interaction}
     *
     * @returns {PromiseLike<void>}
     *
     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}
     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}
     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}
     */
    async performAs(actor) {
        const keys = await actor.answer(this.keys);
        return abilities_1.BrowseTheWeb.as(actor).sendKeys(keys);
    }
}
exports.Press = Press;
class PressKeyInField extends PageElementInteraction_1.PageElementInteraction {
    /**
     * @param {Answerable<Array<Key | string>>} keys
     *  A sequence of one or more keys to press
     *
     * @param {Answerable<PageElement>} field
     *  Web element to send the keys to
     */
    constructor(keys, field /* todo | Question<AlertPromise> | AlertPromise */) {
        super((0, io_1.formatted) `#actor presses ${keys} in ${field}`);
        this.keys = keys;
        this.field = field;
    }
    async performAs(actor) {
        const field = await this.resolve(actor, this.field);
        const keys = await actor.answer(this.keys);
        // fix for protractor
        await abilities_1.BrowseTheWeb.as(actor).executeScript(
        /* istanbul ignore next */
        function focus(element) {
            element.focus();
        }, await field.nativeElement());
        return abilities_1.BrowseTheWeb.as(actor).sendKeys(keys);
    }
}
/**
 * @package
 */
class KeySequence extends core_1.Question {
    constructor(keys) {
        super();
        this.keys = keys;
        this.subject = KeySequence.describe(keys);
    }
    static of(keys) {
        return new KeySequence(keys);
    }
    async answeredBy(actor) {
        const keys = await (0, io_1.asyncMap)(this.keys, key => actor.answer(key));
        return keys
            .flat()
            .filter(key => !!key);
    }
    /**
     * @desc
     *  Changes the description of this question's subject.
     *
     * @param {string} subject
     * @returns {Question<T>}
     */
    describedAs(subject) {
        this.subject = subject;
        return this;
    }
    toString() {
        return this.subject;
    }
    static describe(keys) {
        const prefix = keys.length === 1 ? 'key' : 'keys';
        const description = keys.reduce((acc, key, index) => {
            const separator = input_1.Key.isKey(key) && key.isModifier
                ? '-'
                : acc.separator;
            return {
                description: index === 0
                    ? `${key}`
                    : `${acc.description}${acc.separator}${key}`,
                separator,
            };
        }, { description: '', separator: ', ' }).description;
        return `${prefix} ${description}`;
    }
}
//# sourceMappingURL=Press.js.map