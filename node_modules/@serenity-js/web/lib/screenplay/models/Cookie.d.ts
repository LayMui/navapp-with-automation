import { Answerable, Interaction, Optional, QuestionAdapter, Timestamp } from '@serenity-js/core';
import { CookieData } from './CookieData';
export declare abstract class Cookie implements Optional {
    protected readonly cookieName: string;
    /**
     * @desc
     *  Creates a {@link @serenity-js/core/lib/screenplay~Question} about a Cookie
     *
     * @param {Answerable<string>} name
     * @returns {Question<Promise<Cookie>> & Adapter<Cookie>}
     */
    static called(name: Answerable<string>): QuestionAdapter<Cookie>;
    /**
     * @desc
     *  Sets a cookie for the current page.
     *  Make sure that the actor performing this interaction is on the page that should receive the cookie.
     *  An actor can't set a cookie for an arbitrary page without being on that page.
     *
     * @param {Answerable<CookieData>} cookieData
     * @returns {@serenity-js/core/lib/screenplay~Interaction}
     */
    static set(cookieData: Answerable<CookieData>): Interaction;
    /**
     * @desc
     *  Creates an {@link @serenity-js/core/lib/screenplay~Interaction} to delete all cookies currently set in the browser.
     *
     * @returns {@serenity-js/core/lib/screenplay~Interaction}
     */
    static deleteAll(): Interaction;
    private cookie;
    protected constructor(cookieName: string);
    name(): string;
    /**
     * @desc
     *  Checks if a given cookie is set.
     *
     * @returns {Promise<boolean>}
     */
    isPresent(): Promise<boolean>;
    /**
     * @desc
     *  Returns the value of a given cookie.
     *
     * @returns {Promise<string>}
     */
    value(): Promise<string>;
    /**
     * @desc
     *  Returns the path of a given cookie, if any was set.
     *
     * @returns {Promise<string>}
     */
    path(): Promise<string>;
    /**
     * @desc
     *  Returns the domain of a given cookie, if any was set.
     *
     * @returns {Promise<string>}
     */
    domain(): Promise<string>;
    /**
     * @desc
     *  Checks if a given cookie is HTTP-only.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#restrict_access_to_cookies
     *
     * @returns {Promise<string>}
     */
    isHttpOnly(): Promise<boolean>;
    /**
     * @desc
     *  Checks if a given cookie is secure.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#restrict_access_to_cookies
     *
     * @returns {Promise<string>}
     */
    isSecure(): Promise<boolean>;
    /**
     * @desc
     *  Returns the expiry date of a given cookie
     *
     * @returns {Promise<Timestamp>}
     */
    expiry(): Promise<Timestamp>;
    /**
     * @desc
     *  Deletes a given cookie.
     *
     * @abstract
     *
     * @returns {Promise<void>}
     */
    abstract delete(): Promise<void>;
    /**
     * @desc
     *  Reads a given cookie from the browser.
     *
     *  This method is to be implemented by integration tool-specific adapters.
     *  **Please note**: you don't need to implement any response caching here
     *  since it is covered by {@link Cookie#lazyLoadCookie} method.
     *
     * @protected
     * @abstract
     *
     * @returns {Promise<void>}
     */
    protected abstract read(): Promise<CookieData>;
    /**
     * @desc
     *  Invokes {@link Cookie#read} and caches the result in memory.
     *
     * @private
     * @returns {Promise<CookieData>}
     */
    private lazyLoadCookie;
}
