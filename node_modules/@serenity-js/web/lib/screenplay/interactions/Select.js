"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Select = void 0;
const core_1 = require("@serenity-js/core");
const io_1 = require("@serenity-js/core/lib/io");
const inspected_1 = require("@serenity-js/core/lib/io/inspected");
const screenplay_1 = require("@serenity-js/core/lib/screenplay");
const models_1 = require("../models");
/**
 * @desc
 *  Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to
 *  select an option from a [HTML `<select>` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select),
 *  either by its display name, or by value.
 *
 * @see {@link Selected}
 */
class Select {
    /**
     * @desc
     *  Instantiates this {@link @serenity-js/core/lib/screenplay~Interaction}
     *  with a [`value`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option#attr-value)
     *  of a single [`<option>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option)
     *  for the {@link @serenity-js/core/lib/screenplay/actor~Actor} to select.
     *
     * @example <caption>Example widget</caption>
     *  <select data-test='countries'>
     *      <option value='UK'>United Kingdom</option>
     *      <option value='PL'>Poland</option>
     *      <option value='US'>United States</option>
     *  </select>
     *
     * @example <caption>Lean Page Object describing the widget</caption>
     *  import { Target } from '@serenity-js/protractor';
     *  import { browser, by } from 'protractor';
     *
     *  class Countries {
     *      static dropdown = Target.the('countries dropdown')
     *          .located(by.css('[data-test="countries"]'));
     *  }
     *
     * @example <caption>Retrieving the selected value</caption>
     *  import { actorCalled } from '@serenity-js/core';
     *  import { BrowseTheWeb, Select, Selected } from '@serenity-js/protractor';
     *  import { Ensure, equals } from '@serenity-js/assertions';
     *  import { protractor } from 'protractor';
     *
     *  actorCalled('Nick')
     *      .whoCan(BrowseTheWeb.using(protractor.browser))
     *      .attemptsTo(
     *          Select.value('UK').from(Countries.dropdown),
     *          Ensure.that(Selected.valueOf(Countries.dropdown), equals('UK')),
     *      );
     *
     * @param {Answerable<string>} value
     *  A value of the [`option` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option)
     *  for the {@link @serenity-js/core/lib/screenplay/actor~Actor} to select
     *
     * @returns {SelectBuilder}
     *
     * @see {@link Selected.valueOf}
     * @see {@link BrowseTheWeb}
     * @see {@link Target}
     * @see {@link @serenity-js/assertions~Ensure}
     * @see {@link @serenity-js/assertions/lib/expectations~equals}
     */
    static value(value) {
        return {
            from: (pageElement) => screenplay_1.Interaction.where((0, io_1.formatted) `#actor selects value ${value} from ${pageElement}`, async (actor) => {
                return models_1.PageElement.located(models_1.By.css((0, core_1.q) `option[value=${value}]`))
                    .of(pageElement)
                    .click()
                    .performAs(actor);
            }),
        };
    }
    /**
     * @desc
     *  Instantiates this {@link @serenity-js/core/lib/screenplay~Interaction}
     *  with [`value`s](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option#attr-value)
     *  of multiple [`<option>` elements](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option)
     *  for the {@link @serenity-js/core/lib/screenplay/actor~Actor} to select.
     *
     * @example <caption>Example widget</caption>
     *  <select multiple data-test='countries'>
     *      <option value='UK'>United Kingdom</option>
     *      <option value='PL'>Poland</option>
     *      <option value='US'>United States</option>
     *  </select>
     *
     * @example <caption>Lean Page Object describing the widget</caption>
     *  import { Target } from '@serenity-js/protractor';
     *  import { browser, by } from 'protractor';
     *
     *  class Countries {
     *      static dropdown = Target.the('countries dropdown')
     *          .located(by.css('[data-test="countries"]'));
     *  }
     *
     * @example <caption>Retrieving the selected value</caption>
     *  import { actorCalled } from '@serenity-js/core';
     *  import { BrowseTheWeb, Select, Selected } from '@serenity-js/protractor';
     *  import { Ensure, equals } from '@serenity-js/assertions';
     *  import { protractor } from 'protractor';
     *
     *  actorCalled('Nick')
     *      .whoCan(BrowseTheWeb.using(protractor.browser))
     *      .attemptsTo(
     *          Select.values('UK').from(Countries.dropdown),
     *          Ensure.that(Selected.valuesOf(Countries.dropdown), equals([ 'UK' ])),
     *      );
     *
     * @param {Array<Answerable<string[] | string>>} values
     *  Values of the [`option` elements](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option)
     *  for the {@link @serenity-js/core/lib/screenplay/actor~Actor} to select
     *
     * @returns {SelectBuilder}
     *
     * @see {@link Selected.valuesOf}
     * @see {@link BrowseTheWeb}
     * @see {@link Target}
     * @see {@link @serenity-js/assertions~Ensure}
     * @see {@link @serenity-js/assertions/lib/expectations~equals}
     */
    static values(...values) {
        return {
            from: (pageElement) => screenplay_1.Interaction.where(`#actor selects values ${(0, io_1.commaSeparated)(values.flat(), item => (0, inspected_1.inspected)(item, { inline: true }))} from ${(0, inspected_1.inspected)(pageElement, { inline: true })}`, async (actor) => {
                const answers = await (0, io_1.asyncMap)(values, value => actor.answer(value));
                const desiredValues = answers.flat();
                const options = await models_1.PageElements.located(models_1.By.css(`option`))
                    .of(pageElement)
                    .answeredBy(actor);
                for (const option of options) {
                    const shouldSelect = await optionsToSelect(hasValueEqualOneOf(desiredValues))(option);
                    if (shouldSelect) {
                        await option.click();
                    }
                }
            }),
        };
    }
    /**
     * @desc
     *  Instantiates this {@link @serenity-js/core/lib/screenplay~Interaction}
     *  with a single [`option`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option)
     *  for the {@link @serenity-js/core/lib/screenplay/actor~Actor} to select.
     *
     * @example <caption>Example widget</caption>
     *  <select data-test='countries'>
     *      <option value='UK'>United Kingdom</option>
     *      <option value='PL'>Poland</option>
     *      <option value='US'>United States</option>
     *  </select>
     *
     * @example <caption>Lean Page Object describing the widget</caption>
     *  import { Target } from '@serenity-js/protractor';
     *  import { browser, by } from 'protractor';
     *
     *  class Countries {
     *      static dropdown = Target.the('countries dropdown')
     *          .located(by.css('[data-test="countries"]'));
     *  }
     *
     * @example <caption>Retrieving the selected value</caption>
     *  import { actorCalled } from '@serenity-js/core';
     *  import { BrowseTheWeb, Select, Selected } from '@serenity-js/protractor';
     *  import { Ensure, equals } from '@serenity-js/assertions';
     *  import { protractor } from 'protractor';
     *
     *  actorCalled('Nick')
     *      .whoCan(BrowseTheWeb.using(protractor.browser))
     *      .attemptsTo(
     *          Select.option('Poland').from(Countries.dropdown),
     *          Ensure.that(
     *              Selected.optionIn(Countries.dropdown),
     *              equals('Poland')
     *          ),
     *      );
     *
     * @param {Answerable<string>} value
     *  Text of the [`option` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option)
     *  for the {@link @serenity-js/core/lib/screenplay/actor~Actor} to select
     *
     * @returns {SelectBuilder}
     *
     * @see {@link Selected.optionIn}
     * @see {@link BrowseTheWeb}
     * @see {@link Target}
     * @see {@link @serenity-js/assertions~Ensure}
     * @see {@link @serenity-js/assertions/lib/expectations~equals}
     */
    static option(value) {
        return {
            from: (pageElement) => screenplay_1.Interaction.where((0, io_1.formatted) `#actor selects ${value} from ${pageElement}`, async (actor) => {
                return models_1.PageElement.located(models_1.By.cssContainingText('option', value))
                    .of(pageElement)
                    .click()
                    .performAs(actor);
            }),
        };
    }
    /**
     * @desc
     *  Instantiates this {@link @serenity-js/core/lib/screenplay~Interaction}
     *  with [`option`s](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option)
     *  for the {@link @serenity-js/core/lib/screenplay/actor~Actor} to select.
     *
     * @example <caption>Example widget</caption>
     *  <select multiple data-test='countries'>
     *      <option value='UK'>United Kingdom</option>
     *      <option value='PL'>Poland</option>
     *      <option value='US'>United States</option>
     *  </select>
     *
     * @example <caption>Lean Page Object describing the widget</caption>
     *  import { Target } from '@serenity-js/protractor';
     *  import { browser, by } from 'protractor';
     *
     *  class Countries {
     *      static dropdown = Target.the('countries dropdown')
     *          .located(by.css('[data-test="countries"]'));
     *  }
     *
     * @example <caption>Retrieving the selected value</caption>
     *  import { actorCalled } from '@serenity-js/core';
     *  import { BrowseTheWeb, Select, Selected } from '@serenity-js/protractor';
     *  import { Ensure, equals } from '@serenity-js/assertions';
     *  import { protractor } from 'protractor';
     *
     *  actorCalled('Nick')
     *      .whoCan(BrowseTheWeb.using(protractor.browser))
     *      .attemptsTo(
     *          Select.options('Poland', 'United States').from(Countries.dropdown),
     *          Ensure.that(
     *              Selected.optionsIn(Countries.dropdown),
     *              equals([ 'Poland', 'United States' ])
     *          ),
     *      );
     *
     * @param {Array<Answerable<string[] | string>>} values
     *  Text of the [`option` elements  ](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option)
     *  for the {@link @serenity-js/core/lib/screenplay/actor~Actor} to select
     *
     * @returns {SelectBuilder}
     *
     * @see {@link Selected.optionsIn}
     * @see {@link BrowseTheWeb}
     * @see {@link Target}
     * @see {@link @serenity-js/assertions~Ensure}
     * @see {@link @serenity-js/assertions/lib/expectations~equals}
     */
    static options(...values) {
        return {
            from: (pageElement) => screenplay_1.Interaction.where(`#actor selects ${(0, io_1.commaSeparated)(values.flat(), item => (0, inspected_1.inspected)(item, { inline: true }))} from ${(0, inspected_1.inspected)(pageElement, { inline: true })}`, async (actor) => {
                const answers = await (0, io_1.asyncMap)(values, value => actor.answer(value));
                const desiredOptions = answers.flat();
                const options = await models_1.PageElements.located(models_1.By.css(`option`)).of(pageElement).answeredBy(actor);
                for (const option of options) {
                    const shouldSelect = await optionsToSelect(hasTextEqualOneOf(desiredOptions))(option);
                    if (shouldSelect) {
                        await option.click();
                    }
                }
            }),
        };
    }
}
exports.Select = Select;
/** @package */
function hasValueEqualOneOf(desiredValues) {
    return async (option) => {
        const value = await option.value();
        return desiredValues.includes(value);
    };
}
/** @package */
function hasTextEqualOneOf(desiredValues) {
    return async (option) => {
        const value = await option.text();
        return desiredValues.includes(value);
    };
}
/** @package */
function optionsToSelect(criterion) {
    return (option) => isAlreadySelected(option)
        .then(alreadySelected => criterion(option).then(criterionMet => xor(alreadySelected, criterionMet)));
}
/** @package */
function isAlreadySelected(option) {
    return option.isSelected();
}
/** @package */
function xor(first, second) {
    return first !== second;
}
//# sourceMappingURL=Select.js.map